一、函数
 1、函数就是最基本的一种代码抽象的方式。
    函数如果没有返回语句，函数执行完毕后也会返回结果。只是结果为
    undefined
    匿名函数：没有函数名的定义方式。
 2、函数的调用
    函数名(实参表)
 3、arguments
   它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。
   arguments类似Array但它不是一个Array.
   arguments最常用在判断传入参数的个数
 4、rest参数
   由于javascript函数允许接收任意个参数，于是我们就要用arguments来处理了。
   function foo(a,b,..rest){
       console.log("a="+a);
       console.log("b="+b);
       console.log(rest);
   }
 5、变量的作用域
  JavaScript函数可以嵌套，内部函数可以调用外面函数的变量，但是外面的函数无法
  访问内部函数的变量。
 6、变量提升
   JavaScript变量提升的是变量的定义不是变量的赋值。
 7、全局作用域
    不在任何函数内定义的变量就具有全局作用域。实际上,
    JavaScript默认有一个全局对象window,而全局变量就是绑定到window的一个属性。
    顶层函数的定义也被视为一个全局变量。
    这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当
    前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError
    错误。
8、名称空间
   全局变量会绑定到window上，不同的JavaScript文件如果使用了相同
   的全局变量，或者定义了相同名字的顶层函数都会造成命名冲突，并且很难发现。
   减少冲突的一个方法就是把所有的变量和函数都绑定到一个全局变量中。
   把自己的代码全部放入唯一的名字空间中，会大大减少全局变量冲突的
   可能。
9、局部作用域
   由于JavaScript的变量作用域实际上是函数内部。
   ES6引入了一个关键字let,用let替代var可以申明一个块级作用域变量。
10、常量
    我们通常用全部大写的变量表示常量。
    ES6标准引入了const来定义常量。const 也具有块作用域。
11、解析赋值也可以叫做批量赋值